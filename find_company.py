from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from rapidfuzz import fuzz
import time, re, json

class FindInvoiceCompany:
    def __init__(self, input_json: dict, file_name: str, num: int, fuzzy_threshold: int = 95):
        # input_json ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô dict ‚Äú‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏™‡∏∏‡∏î‚Äù ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà wrapper)
        self.data = input_json.get("json", input_json)  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ key "json" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ
        self.file_name = file_name
        self.page = num
        self.fuzzy_threshold = fuzzy_threshold

    def _normalize_tax_id(self, tax_id: str) -> str:
        digits = re.sub(r"\D", "", tax_id or "")
        return digits

    def invoice_company(self) -> dict:
        tax_id_raw = self.data.get("tax_id")
        tax_id = self._normalize_tax_id(tax_id_raw)

        # validate 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        if not tax_id or len(tax_id) != 13:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô dict ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
            self._write_out(verified={
                "matched": None,
                "seller_from_receipt": (self.data.get("seller") or "").strip(),
                "seller_from_tax_id": None,
                "reason": "invalid_or_missing_tax_id"
            })
            return self.data

        # options = webdriver.ChromeOptions()
        options = Options()
        options.add_experimental_option("detach", False)  # ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        driver = webdriver.Chrome(options=options)

        try:
            wait = WebDriverWait(driver, 15)
            driver.get("https://datawarehouse.dbd.go.th/index")

            # ‡∏õ‡∏¥‡∏î popup / ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
            try:
                wait.until(EC.element_to_be_clickable((By.ID, "btnWarning"))).click()
            except Exception:
                pass  # ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ

            # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            box = wait.until(EC.presence_of_element_located((By.ID, "key-word")))
            box.clear()
            box.send_keys(tax_id + Keys.ENTER)

            # ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå/‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏∂‡πâ‡∏ô
            time.sleep(1)  # ‡∏Å‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î dynamic
            # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á h3 ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
            try:
                h3 = wait.until(EC.presence_of_element_located(
                    (By.XPATH, '//*[@id="companyProfileTab1"]/div[1]/div[1]/div/div/h3')
                ))
                company_text = h3.text.strip()
            except Exception:
                company_text = ""

            # ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
            m = re.search(r"‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\s*[:Ôºö]\s*(.+)", company_text)
            if m:
                company_name = m.group(1).strip()
            else:
                # fallback: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ prefix ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ
                company_name = company_text or None

            print(company_name)
            seller_name = (self.data.get("seller") or "").strip()
            if company_name:
                similarity = fuzz.ratio(company_name.strip(), seller_name)
                matched = similarity >= self.fuzzy_threshold
            else:
                matched = None

            verified = {
                "matched": matched,
                "seller_from_receipt": seller_name,
                "seller_from_tax_id": company_name
            }

            self._write_out(verified=verified)
            return self.data

        except Exception as e:
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏∞‡πÑ‡∏î‡πâ debug ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ
            self._write_out(verified={
                "matched": None,
                "seller_from_receipt": (self.data.get("seller") or "").strip(),
                "seller_from_tax_id": None,
                "error": str(e)
            })
            return self.data
        finally:
            try:
                driver.quit()
            except Exception:
                pass

    def _write_out(self, verified: dict):
        self.data["verified_seller_name"] = verified
        #print(self.page) # üëà ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (stdout)
        out_path = f"{self.file_name}_output_page_{self.page}.json"
        # with open(out_path, "w", encoding="utf-8") as f:
        #     json.dump(self.data, f, ensure_ascii=False, indent=2)
